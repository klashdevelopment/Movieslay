<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Movieslay | Browse content for free</title>
    <link rel="stylesheet" href="https://gtml.fly.dev/regular-ass-style.css">
    <link rel="stylesheet" href="/index.css">
    <link href="https://site-assets.fontawesome.com/releases/v6.3.0/css/all.css" rel="stylesheet"/>
    <meta property="og:title" content="<%= movie.name %> on Movieslay">
    <meta property="og:description" content="Watch it for free, forever.">
    <meta property="og:image" content="<%=movie.thumbnail%>">
    <meta property="og:image:alt" content="Movieslay Logo">
    <meta property="og:url" content="https://movieslay.fly.dev">
    <meta property="og:type" content="website">
    <meta name="twitter:card" content="summary">
    <meta name="twitter:title" content="<%= movie.name %> on Movieslay">
    <meta name="twitter:description" content="Watch it for free, forever.">
    <meta name="twitter:image" content="<%=movie.thumbnail%>">
    <meta name="twitter:image:alt" content="Movieslay Logo">
    <meta name="twitter:url" content="https://movieslay.fly.dev">
    <link rel="stylesheet" href="/watch.css">
</head>
<body>
    <center id="hero">
        <h1 class="bold">Movieslay | <%= movie.name %></h1>
        <img src="<%= movie.thumbnail %>" style="height:20vh;">
        <div class="line"></div>
        <h4>Streaming</h4>
        <h3>PLEASE: Install <a href="https://ghostery.com"> an adblocker</a> or a adblocking browser (<a href="https://brave.com">Brave</a> or <a href="https://operagx.com">Opera</a>). DO NOT click on popups or ads</h3>
        <a>Give it some time to load. <%=movie.htmlEmbedContent.startsWith("_UT")?"It is a torrent.":"It is pure HTML embedding."%></a><br>
        <a><%=movie.htmlEmbedContent.startsWith("_UT")?movie.htmlEmbedContent.substring(3):""%></a>
        <div>
            <div id="progressBar"></div>
            <video id="output" controls></video>
        </div>
        <div class="line"></div>
        <h4>Downloading & Info</h4>
        <b>IMDB: </b> <%= movie.imdb %> <br>
        <b>Year: </b> <%= movie.year %> <br>
        <b>Download as Video: </b> <a href="<%= movie.download %>">download link</a> <br>
        <div id="hero">
          <div id="output">
            <div id="progressBar"></div>
            <!-- The video player will be added here -->
          </div>
          <select id="fileList">
          </select>
          <!-- Statistics -->
          <div id="status">
            <div>
              <span class="show-leech">Downloading </span>
              <span class="show-seed">Seeding </span>
              <code id="streamedFileName"></code>
              <span class="show-leech"> from </span>
              <span class="show-seed"> to </span>
              <code id="numPeers">0 peers</code>
            </div>
        
            <div>
              <code id="downloaded"></code> of <code id="total"></code> - <span id="remaining"></span>
            </div>
        
            <div>
              &#x2193; <code id="downloadSpeed">0 b/s</code> / <code id="uploadSpeed">0 b/s</code> &#x2191;
            </div>
          </div>
        </div>
    </center>
        <script src="https://cdn.jsdelivr.net/npm/webtorrent@latest/webtorrent.min.js"></script>
        <script>
          document.addEventListener('DOMContentLoaded', function () {
            // if(`<%=movie.htmlEmbedContent%>`.startsWith("_UT")) {
                const torrentId = 'magnet:?xt=urn:btih:08ada5a7a6183aae1e09d831df6748d566095a10&dn=Sintel&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=udp%3A%2F%2Fexplodie.org%3A6969&tr=udp%3A%2F%2Ftracker.empire-js.us%3A1337&tr=wss%3A%2F%2Ftracker.btorrent.xyz&tr=wss%3A%2F%2Ftracker.openwebtorrent.com&tr=wss%3A%2F%2Ftracker.fastcast.nz&ws=https%3A%2F%2Fwebtorrent.io%2Ftorrents%2F' // magnet link.
                const client = new WebTorrent()

      // HTML elements
      const $body = document.body
      const $progressBar = document.querySelector('#progressBar')
      const $numPeers = document.querySelector('#numPeers')
      const $downloaded = document.querySelector('#downloaded')
      const $total = document.querySelector('#total')
      const $remaining = document.querySelector('#remaining')
      const $uploadSpeed = document.querySelector('#uploadSpeed')
      const $downloadSpeed = document.querySelector('#downloadSpeed')

      navigator.serviceWorker.register('./sw.min.js', { scope: './' }).then(reg => {
        const worker = reg.active || reg.waiting || reg.installing
        function checkState (worker) {
          return worker.state === 'activated' && client.createServer({ controller: reg }) && download()
        }
        if (!checkState(worker)) {
          worker.addEventListener('statechange', ({ target }) => checkState(target))
        }
      })

      function download () {
        // Download the torrent
        client.add(torrentId, torrent => {

          for(var file in torrent.files) {
            var option = document.createElement("option");
            option.text = file.name;
            option.value = file.name;
            document.querySelector('#fileList').add(option);
          }
          // Torrents can contain many files. Let's use the .mp4 file
          document.querySelector('#fileList').addEventListener('change', function () {
            const file = torrent.files.find(file => {
              return file.name.equals(this.value);
            });
            // Stream the file in the browser
            file.streamTo(document.querySelector('#output'))
          });
            // Trigger statistics refresh
            torrent.on('done', onDone)
            setInterval(onProgress, 500)
            onProgress()

            // Statistics
            function onProgress () {
            // Peers
              $numPeers.innerHTML = torrent.numPeers + (torrent.numPeers === 1 ? ' peer' : ' peers')

              // Progress
              const percent = Math.round(torrent.progress * 100 * 100) / 100
              $progressBar.style.width = percent + '%'
              $downloaded.innerHTML = prettyBytes(torrent.downloaded)
              $total.innerHTML = prettyBytes(torrent.length)

              // Remaining time
              let remaining
              if (torrent.done) {
                remaining = 'Done.'
              } else {
                remaining = moment.duration(torrent.timeRemaining / 1000, 'seconds').humanize()
                remaining = remaining[0].toUpperCase() + remaining.substring(1) + ' remaining.'
              }
              $remaining.innerHTML = remaining

              // Speed rates
              $downloadSpeed.innerHTML = prettyBytes(torrent.downloadSpeed) + '/s'
              $uploadSpeed.innerHTML = prettyBytes(torrent.uploadSpeed) + '/s'
            }
            function onDone () {
              $body.className += ' is-seed'
              onProgress()
            }
          })
      }

      // Human readable bytes util
      function prettyBytes (num) {
        const units = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
        const neg = num < 0
        if (neg) num = -num
        if (num < 1) return (neg ? '-' : '') + num + ' B'
        const exponent = Math.min(Math.floor(Math.log(num) / Math.log(1000)), units.length - 1)
        const unit = units[exponent]
        num = Number((num / Math.pow(1000, exponent)).toFixed(2))
        return (neg ? '-' : '') + num + ' ' + unit
      }
            // }else {
            //     var x = (function() {
            //     // this prevents any overhead from creating the object each time
            //     var element = document.createElement('div');

            //     function decodeHTMLEntities (str) {
            //         if(str && typeof str === 'string') {
            //         // strip script/html tags
            //         str = str.replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
            //         str = str.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
            //         element.innerHTML = str;
            //         str = element.textContent;
            //         element.textContent = '';
            //         }

            //         return str;
            //     }

            //     return decodeHTMLEntities;
            // })()(`<%=movie.htmlEmbedContent%>`);
            //     document.querySelector('#output').insertAdjacentHTML('beforeend', x);
            // }
          });
        </script>
</body>
</html>